@model Post
@{
    TimeSpan timeSpanSincePosted = DateTime.UtcNow.Subtract(Model.DateCreated);

    // string displayTime = "";
    // if (timeSpanSincePosted.TotalDays >= 1)
    //     displayTime = $"{timeSpanSincePosted.Days} day ago";
    // else if (timeSpanSincePosted.TotalDays > 1)
    //     displayTime = $"{timeSpanSincePosted.Days} days ago";

    // else if (timeSpanSincePosted.TotalHours >= 1)
    //     displayTime = $"{timeSpanSincePosted.Hours} hour ago";
    // else if (timeSpanSincePosted.TotalHours < 1)
    //     displayTime = $"{timeSpanSincePosted.Hours} hours ago";

    // else if (timeSpanSincePosted.TotalMinutes >= 1)
    //     displayTime = $"{timeSpanSincePosted.Hours} minute ago";
    // else if (timeSpanSincePosted.TotalMinutes < 1)
    //     displayTime = $"{timeSpanSincePosted.Hours} minutes ago";
    // else
    //     displayTime = $"Just now";

    string displayTime = timeSpanSincePosted switch
    {
        var t when t.TotalDays >= 1 => $"{(int)t.TotalDays}d ago",
        var t when t.TotalHours >= 1 => $"{(int)t.TotalHours}h ago",
        var t when t.TotalMinutes >= 1 => $"{(int)t.TotalMinutes}m ago",
        _ => "Just now"
    };

}

<div class="bg-white rounded-xl shadow-sm text-sm font-medium border1">
    @* Post Heading *@
    <div class="flex gap-3 p-sm-4 p-2.5 text-sm font-medium">
        <a>
            @* <img src="@(string.IsNullOrEmpty(post.User.ProfilePictureUrl) ? "~/images/avatars/foggyMountain.jpg" : post.User)" class="w-9 h-9 rounded-full" /> *@
            <img src="@(Model.User.ProfilePictureUrl ?? "~/images/avatars/user.png")" class="w-9 h-9 rounded-full" />
        </a>
        <div class="flex-1">
            <a>
                <h4 class="text-black">@Model.User.FullName</h4>
                <div class="text-xs text-gray-500/80" title="@Model.DateCreated.ToString("MM/dd/yyyy HH:mm")">@displayTime</div>
            </a>
        </div>
        <div class="-mr-1">
            <button type="button" class="button-icon w-8 h-8">
                <ion-icon class="text-xl" name="ellipsis-horizontal"></ion-icon>
            </button>
            <div class="w-[245px]" uk-dropdown="pos: bottom-right; animation: uk-animation-scale-up uk-transform-origin-top-right; animate-out: true; mode: click">
                <form>
                    <button type="button" class="hover:!bg-red-50 icon-link">
                        <ion-icon class="text-xl shrink-0" name="flag-outline"></ion-icon> Report
                    </button>
                </form>
                <hr />
                <form>
                    <button type="button" class="hover:!bg-red-50 icon-link">
                        <ion-icon class="text-xl" name="lock-closed-outline"></ion-icon> Set as private
                    </button>
                </form>
                <hr />
                <form>
                    <button type="button" class="hover:!bg-red-50 icon-link">
                        <ion-icon class="text-xl" name="trash-bin-outline"></ion-icon> Delete post
                    </button>
                </form>
            </div>
        </div>
    </div>
    @* Post Content *@
    <a>
        <div class="px-sm-4 p-2.5 pt-0 w-full">
            <p class="font-normal">
                @Model.Content
            </p>
        </div>
    </a>
    @if (!string.IsNullOrEmpty(Model.ImageUrl))
    {
        <a>
            <div class="relative w-full lg:h-96 h-full px-sm-4">
                <img src="@Model.ImageUrl" class="sm\:rounded-lg w-full h-full object-cover" />
            </div>
        </a>
    }

    @* Icins *@
    <div class="p-sm-4 p-2.5 flex items-center gap-4 text-xs font-semibold">
        <div class="flex items-center gap-2.5">
            <form asp-controller="Home" asp-action="TogglePostLike">
                <input type="hidden" name="postId" value="@Model.Id" />
                <button type="submit" class="button-icon @(Model.Likes.Any(n => n.UserId == 1) ? "text-red-500 bg-red-100" : "")">
                    <ion-icon class="text-lg" name="@(Model.Likes.Any(n => n.UserId == 1) ? "heart" : "heart-outline")"></ion-icon>
                </button>
            </form>
            <a href#>@Model.Likes.Count</a>
        </div>
        <div class="flex items-center gap-3">
            <a class="button-icon">
                <ion-icon class="text-lg" name="chatbubble-ellipses-outline"></ion-icon>
            </a>
            <a href#>@Model.Comments.Count</a>
        </div>
        <div class="ml-auto"></div>
        <div>
            <a class="button-icon ml-auto">
                <ion-icon class="text-lg" name="bookmark-outline"></ion-icon>
            </a>
        </div>
    </div>
    @* Add comment section *@
    <div>
        <div class="p-2.5 border-t border-gray-100 font-normal space-y-3 relative">
            @foreach (var comment in Model.Comments.OrderByDescending(n => n.DateCreated).Take(3))
            {
                TimeSpan CommentTimeSpanSincePosted = DateTime.UtcNow.Subtract(comment.DateCreated);
                string commentDisplayTime = CommentTimeSpanSincePosted switch
                {
                    var t when t.TotalDays >= 1 => $"{(int)t.TotalDays}d ago",
                    var t when t.TotalHours >= 1 => $"{(int)t.TotalHours}h ago",
                    var t when t.TotalMinutes >= 1 => $"{(int)t.TotalMinutes}m ago",
                    _ => "Just now"
                };

                <div class="flex items-start gap-3 relative">
                    <a>
                        <img src="@(comment.User.ProfilePictureUrl ?? "~/images/avatars/user.png")" class="w-6 h-6 mt-1 rounded-full" />
                    </a>
                    <div class="flex-1">
                        <div class="flex justify-content-between">
                            <a class="text-black font-medium inline-block flex-grow">
                                @comment.User.FullName
                            </a>
                            <small>@commentDisplayTime</small>
                        </div>
                        <p class="mt-0.5">
                            @comment.Content
                        </p>
                    </div>
                </div>
            }
            @if (Model.Comments.Count >= 3)
            {
                <div class="p-1.5">
                    <a>Show all comments...</a>
                </div>
            }
        </div>
        <form asp-controller="Home" asp-action="AddPostComment">
            <div class="px-sm-4 py-sm-3 p-2.5 border-t border-gray-100 flex items-center gap-1">
                <img src="~/images/avatars/user.png" class="w-6 h-6 rounded-full" />
                <input type="hidden" name="postId" value="@Model.Id" />
                <div class="flex-1 relative overflow-hidden h-10">
                    <textarea name="content" id="comment" rows="1" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Add your comment..."></textarea>
                    @* <textarea placeholder="Add Comment..." rows="1" class="w-full resize-none !bg-transparent px-4 py-4 focus:!ring-transparent"></textarea> *@
                </div>
                <button type="submit" class="text-sm rounded-full py-1.5 px-3.5 bg-primary-soft">Comments</button>
            </div>
        </form>
    </div>
</div>